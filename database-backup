#!/bin/bash
#
#
# ARG_OPTIONAL_SINGLE([username],[],[Database username])
# ARG_OPTIONAL_SINGLE([password],[],[Database password])
# ARG_OPTIONAL_SINGLE([host],[],[Database host],[localhost])
# ARG_OPTIONAL_SINGLE([port],[],[Database port],[3306])
# ARG_OPTIONAL_SINGLE([output-directory],[],[Output directory],[/tmp])
# ARG_OPTIONAL_BOOLEAN([gz],[],[Directly gzip output])
# ARG_OPTIONAL_REPEATED([ignore],[],[Ignore table in export],['information_schema' 'innodb' 'performance_schema' 'tmp' 'mysql' 'sys'])
# ARG_HELP([database-backup])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_username=
_arg_password=
_arg_host="localhost"
_arg_port="3306"
_arg_output_directory="/tmp"
_arg_gz="off"
_arg_ignore=('information_schema' 'innodb' 'performance_schema' 'tmp' 'mysql' 'sys')

print_help ()
{
	printf '%s\n' "database-backup"
	printf 'Usage: %s [--username <arg>] [--password <arg>] [--host <arg>] [--port <arg>] [--output-directory <arg>] [--(no-)gz] [--ignore <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "--username: Database username (no default)"
	printf '\t%s\n' "--password: Database password (no default)"
	printf '\t%s\n' "--host: Database host (default: 'localhost')"
	printf '\t%s\n' "--port: Database port (default: '3306')"
	printf '\t%s\n' "--output-directory: Output directory (default: '/tmp')"
	printf '\t%s\n' "--gz,--no-gz: Directly gzip output (off by default)"
	printf '\t%s\n' "--ignore: Ignore table in export (default array: ('information_schema' 'innodb' 'performance_schema' 'tmp' 'mysql' 'sys') )"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--username)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_username="$2"
				shift
				;;
			--username=*)
				_arg_username="${_key##--username=}"
				;;
			--password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			--host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_host="$2"
				shift
				;;
			--host=*)
				_arg_host="${_key##--host=}"
				;;
			--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			--output-directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output_directory="$2"
				shift
				;;
			--output-directory=*)
				_arg_output_directory="${_key##--output-directory=}"
				;;
			--no-gz|--gz)
				_arg_gz="on"
				test "${1:0:5}" = "--no-" && _arg_gz="off"
				;;
			--ignore)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ignore+=("$2")
				shift
				;;
			--ignore=*)
				_arg_ignore+=("${_key##--ignore=}")
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash

echoerr() { echo "$@" 1>&2; }


if [[ $_arg_username == "" ]];then
   echo "Missing username!"
   print_help
fi

if [[ $_arg_password == "" ]];then
   echo "Missing password!"
   print_help
fi

if [[ $_arg_host == "" ]];then
   echo "Missing host!"
   print_help
fi

# Regex-ify table ignores
_arg_ignore=$(printf "|%s" "${_arg_ignore[@]}")
_arg_ignore=${_arg_ignore:1}

# Let the magic begin
databases=$(mysql -h ${_arg_host} -p${_arg_password} -P ${_arg_port} -u ${_arg_username} --skip-column-names -B -e "SHOW DATABASES;" | grep -v -E $_arg_ignore)

exit_status=0
for database in $databases; do
    dump_file=$_arg_output_directory"/"$database
    compressor=tee
    if [[ $_arg_gz == "on" ]]; then
       dump_file=${dump_file}.gz
       compressor=gzip
    fi
    echo "Dumping database \`$database\` to '$dump_file'"
    mysqldump --host ${_arg_host} --opt -P ${_arg_port} -u ${_arg_username} -p${_arg_password} $database | ${compressor} > ${dump_file}
    if [ ${PIPESTATUS[0]} -ne "0" ];
    then
        echoerr Backup Failed: $database
        exit_status=1
    fi
done
exit $exit_status
